'''
Script for summarizing FT-ICR MS results as generated by the EnviroOrg
software (National High Magnetic Field Laboratory, FSU).


Jordon D Hemingway
Created: 6 April 2017
Updated: 7 April 2017
'''

#import modules
import numpy as np
import pandas as pd

# DEFINE FUNCTIONS

#define function to calculate compound category abundances
def calc_pct(forms, sams, c, ctype = 'Category'):
	'''
	Calculates the percent of each sample that belongs to a particular
	compound category, c.

	Parameters
	----------
	forms : pd.DataFrame
		Dataframe of all formulas for all samples as outputted by EnviroOrg.

	sams : pd.Index
		Index of a list of sample names to be calculated.

	c : str
		String of the compound category to be calculated

	ctype : str
		String saying which type to calculate, either 'Compound.category'
		or 'Class'

	Returns
	-------
	c_pct : pd.DataFrame
		DataFrame of the percent of compound category, c, that is in each 
		sample according to formula number and relative MS abundance.
	'''

	#check type
	assert ctype in ['Category','Class'], \
		'ctype %s not allowed, must be "Category" or "Class"' % ctype

	#calculate total formula numbers and intensity
	tot_N = np.sum(forms[sams] > 0)
	tot_int = np.sum(forms[sams])

	#extract compounds within class/category c
	cforms = forms[forms[ctype] == c]

	#calculate c formula numbers and intensity
	c_N = np.sum(cforms[sams] > 0)
	c_int = np.sum(cforms[sams])

	#calculate percentages
	c_pct_N = 100*c_N/tot_N
	c_pct_RA = 100*c_int/tot_int

	c_pct = pd.concat(
		[c_pct_N, c_pct_RA], 
		axis = 1
		)

	c_pct.columns = [c+'_%N', c+'_%RA']

	return c_pct

# IMPORT DATA AND ENSURE PROPER FORMAT
forms = pd.read_csv('drake_formula_table.csv', index_col = 0)

#assert proper index
ind_name = forms.index.name

assert ind_name == 'Formula', \
	'Index is currently %s, must be "Formula"' % ind_name

#assert descriptive columns exist
col_names = forms.columns

var_cols = [
	'Theor_mz',
	'DBE',
	'HC',
	'OC',
	'NC',
	'SC',
	'C',
	'H',
	'N',
	'O',
	'S',
	'AImod',
	'Category',
	'Class'
	]

assert set(var_cols).issubset(col_names), \
	'Column names do not contain all necessary EnviroOrg variable columns!'

#extract sample names as all remaining columns
sams = forms.columns.difference(var_cols)

# GENERATE EMPTY SUMMARY DATAFRAME

#all compound categories as written in EnviroOrg tables
cats = [
	'aliphatic_highOC',
	'aliphatic_lowOC',
	'condensed_aromatic',
	'unsaturated_phenolic_highOC',
	'unsaturated_phenolic_lowOC',
	'peptide_like',
	'polyphenolic_highOC',
	'polyphenolic_lowOC',
	# 'sugar',
	]

#all compound classes as written in EnviroOrg tables
classes = [
	'CHO',
	'CHON',
	'CHOS',
	'CHONS',
	]

#generate a list of columns to calculate
mets = [
	'Nform',
	'AveMass_N',
	'AveMass_RA',
	]

#specify percent by formula number or by relative abundance
cats_N = [s + '_%N' for s in cats]
classes_N = [s + '_%N' for s in classes]
cats_RA = [s + '_%RA' for s in cats]
classes_RA = [s + '_%RA' for s in classes]

#concatenate
cols = mets + cats_N + classes_N + cats_RA + classes_RA

#make dataframe
sum_df = pd.DataFrame(index = sams, columns = cols)

# POPULATE MATRIX

#calculate percent of each compound category
for c in cats:

	sum_df.loc[sams, [c+'_%N', c+'_%RA']] = calc_pct(
		forms, 
		sams, 
		c, 
		ctype = 'Category'
		)

#calculate percent of each class
for c in classes:

	sum_df.loc[sams, [c+'_%N', c+'_%RA']] = calc_pct(
		forms, 
		sams, 
		c, 
		ctype = 'Class'
		)

#calculate N
	sum_df['Nform'] = np.sum(forms[sams] > 0)

#calculate average m/z
for s in sams:
	f = forms[forms[s] > 0]

	sum_df.loc[s, 'AveMass_N'] = np.average(f['Theor_mz'])
	sum_df.loc[s, 'AveMass_RA'] = np.average(f['Theor_mz'], weights = f[s])

# SAVE RESULTS
sum_df.to_csv('drake_summary_table.csv')

